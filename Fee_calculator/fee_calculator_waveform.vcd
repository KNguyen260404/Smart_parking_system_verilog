$date
	Mon Jun 16 12:42:27 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module Fee_calculator_tb $end
$var wire 1 ! fee_valid $end
$var wire 8 " fee_amount [7:0] $end
$var parameter 32 # BASE_FEE $end
$var parameter 32 $ CLK_PERIOD $end
$var parameter 32 % HOURLY_RATE $end
$var parameter 32 & MINIMUM_TIME $end
$var reg 1 ' calculate_fee $end
$var reg 1 ( clk $end
$var reg 32 ) entry_time [31:0] $end
$var reg 32 * exit_time [31:0] $end
$var reg 1 + reset $end
$var reg 8 , vehicle_id [7:0] $end
$scope function calculate_expected_fee $end
$var reg 32 - e_time [31:0] $end
$var reg 8 . hours [7:0] $end
$var reg 32 / x_time [31:0] $end
$upscope $end
$scope module uut $end
$var wire 1 ' calculate_fee $end
$var wire 1 ( clk $end
$var wire 32 0 entry_time [31:0] $end
$var wire 32 1 exit_time [31:0] $end
$var wire 1 + reset $end
$var wire 8 2 vehicle_id [7:0] $end
$var parameter 8 3 BASE_FEE $end
$var parameter 2 4 CALC_DURATION $end
$var parameter 2 5 CALC_FEE $end
$var parameter 2 6 COMPLETE $end
$var parameter 8 7 HOURLY_RATE $end
$var parameter 2 8 IDLE $end
$var parameter 32 9 MINIMUM_TIME $end
$var reg 1 : calculation_in_progress $end
$var reg 2 ; calculation_state [1:0] $end
$var reg 8 < fee_amount [7:0] $end
$var reg 1 ! fee_valid $end
$var reg 8 = hours_parked [7:0] $end
$var reg 32 > parking_duration [31:0] $end
$upscope $end
$scope task calculate_and_wait $end
$var reg 32 ? e_time [31:0] $end
$var reg 8 @ expected_fee [7:0] $end
$var reg 8 A v_id [7:0] $end
$var reg 32 B x_time [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b111100 9
b0 8
b101 7
b11 6
b10 5
b1 4
b1010 3
b111100 &
b101 %
b1010 $
b1010 #
$end
#0
$dumpvars
bx B
bx A
bx @
bx ?
bx >
bx =
bx <
bx ;
x:
b0 2
b0 1
b0 0
bx /
bx .
bx -
b0 ,
1+
b0 *
b0 )
0(
0'
bx "
x!
$end
#5
b0 ;
0:
b0 =
b0 >
0!
b0 "
b0 <
1(
#10
0(
#15
1(
#20
0(
0+
#25
1(
#30
0(
1'
b1111 @
b1 .
b0 -
b111100 /
b1 ,
b1 2
b111100 *
b111100 1
b1 A
b111100 B
b0 ?
#35
1:
b1 ;
1(
#40
0(
0'
#45
b10 ;
b1 =
b111100 >
1(
#50
0(
#55
b11 ;
b1111 "
b1111 <
1(
#60
0(
#65
b0 ;
0:
1!
1(
#70
0(
#75
0!
1(
#80
0(
#85
1(
#90
0(
#95
1(
#100
0(
#105
1(
#110
0(
#115
1(
#120
0(
#125
1:
b1 ;
1(
1'
b10100 @
b10 .
b1100100 -
b11011100 /
b10 ,
b10 2
b11011100 *
b11011100 1
b1100100 )
b1100100 0
b10 A
b11011100 B
b1100100 ?
#130
0(
#135
b10 ;
b10 =
b1111000 >
1(
0'
#140
0(
#145
b11 ;
b10100 "
b10100 <
1(
#150
0(
#155
b0 ;
0:
1!
1(
#160
0(
#165
0!
1(
#170
0(
#175
1(
#180
0(
#185
1(
#190
0(
#195
1(
#200
0(
#205
1(
#210
0(
#215
1:
b1 ;
1(
1'
b100011 @
b101 .
b111110100 -
b1100100000 /
b11 ,
b11 2
b1100100000 *
b1100100000 1
b111110100 )
b111110100 0
b11 A
b1100100000 B
b111110100 ?
#220
0(
#225
b10 ;
b101 =
b100101100 >
1(
0'
#230
0(
#235
b11 ;
b100011 "
b100011 <
1(
#240
0(
#245
b0 ;
0:
1!
1(
#250
0(
#255
0!
1(
#260
0(
#265
1(
#270
0(
#275
1(
#280
0(
#285
1(
#290
0(
#295
1(
#300
0(
#305
1:
b1 ;
1(
1'
b1111 @
b1 .
b1111101000 -
b10000000110 /
b100 ,
b100 2
b10000000110 *
b10000000110 1
b1111101000 )
b1111101000 0
b100 A
b10000000110 B
b1111101000 ?
#310
0(
#315
b10 ;
b1 =
b11110 >
1(
0'
#320
0(
#325
b11 ;
b1111 "
b1111 <
1(
#330
0(
#335
b0 ;
0:
1!
1(
#340
0(
#345
0!
1(
#350
0(
#355
1(
#360
0(
#365
1(
#370
0(
#375
1(
#380
0(
#385
1(
#390
0(
#395
1:
b1 ;
1(
1'
b10100 @
b10 .
b11111010000 -
b100001001000 /
b1010 ,
b1010 2
b100001001000 *
b100001001000 1
b11111010000 )
b11111010000 0
b1010 A
b100001001000 B
b11111010000 ?
#400
0(
#405
b10 ;
b10 =
b1111000 >
1(
0'
#410
0(
#415
b11 ;
b10100 "
b10100 <
1(
#420
0(
#425
b0 ;
0:
1!
1(
#430
0(
#435
0!
1(
#440
0(
#445
1(
#450
0(
#455
1(
#460
0(
#465
1(
#470
0(
#475
1(
#480
0(
#485
1:
b1 ;
1(
1'
b11001 @
b11 .
b101110111000 -
b110001101100 /
b10100 ,
b10100 2
b110001101100 *
b110001101100 1
b101110111000 )
b101110111000 0
b10100 A
b110001101100 B
b101110111000 ?
#490
0(
#495
b10 ;
b11 =
b10110100 >
1(
0'
#500
0(
#505
b11 ;
b11001 "
b11001 <
1(
#510
0(
#515
b0 ;
0:
1!
1(
#520
0(
#525
0!
1(
#530
0(
#535
1(
#540
0(
#545
1(
#550
0(
#555
1(
#560
0(
#565
1(
#570
0(
#575
1:
b1 ;
1(
1'
b11110 @
b100 .
b111110100000 -
b1000010010000 /
b11110 ,
b11110 2
b1000010010000 *
b1000010010000 1
b111110100000 )
b111110100000 0
b11110 A
b1000010010000 B
b111110100000 ?
#580
0(
#585
b10 ;
b100 =
b11110000 >
1(
0'
#590
0(
#595
b11 ;
b11110 "
b11110 <
1(
#600
0(
#605
b0 ;
0:
1!
1(
#610
0(
#615
0!
1(
#620
0(
#625
1(
#630
0(
#635
1(
#640
0(
#645
1(
#650
0(
#655
1(
#660
0(
#665
1:
b1 ;
1(
1'
b1111 @
b1001110001000 -
b1001110001000 /
b101 ,
b101 2
b1001110001000 *
b1001110001000 1
b1001110001000 )
b1001110001000 0
b101 A
b1001110001000 B
b1001110001000 ?
#670
0(
#675
b10 ;
b1 =
b0 >
1(
0'
#680
0(
#685
b11 ;
b1111 "
b1111 <
1(
#690
0(
#695
b0 ;
0:
1!
1(
#700
0(
#705
0!
1(
#710
0(
#715
1(
#720
0(
#725
1(
#730
0(
#735
1(
#740
0(
#745
1(
#750
0(
#755
1:
b1 ;
1(
1'
b1010 @
b1011101110000 -
b1011100001100 /
b110 ,
b110 2
b1011100001100 *
b1011100001100 1
b1011101110000 )
b1011101110000 0
b110 A
b1011100001100 B
b1011101110000 ?
#760
0(
#765
b10 ;
b0 =
1(
0'
#770
0(
#775
b11 ;
b1010 "
b1010 <
1(
#780
0(
#785
b0 ;
0:
1!
1(
#790
0(
#795
0!
1(
#800
0(
#805
1(
#810
0(
#815
1(
#820
0(
#825
1(
#830
0(
#835
1(
#840
0(
#845
1:
b1 ;
1(
1'
b111 ,
b111 2
b1101111010000 *
b1101111010000 1
b1101101011000 )
b1101101011000 0
#850
0(
1+
#855
b0 ;
0:
b0 "
b0 <
1(
#860
0(
#865
1(
#870
0(
0'
0+
#875
1(
#880
0(
#885
1(
#890
0(
#895
1(
#900
0(
#905
1(
#910
0(
#915
1(
#920
0(
1'
b1111 @
b1 .
b1111101000000 -
b1111101111100 /
b1000 ,
b1000 2
b1111101111100 *
b1111101111100 1
b1111101000000 )
b1111101000000 0
b1000 A
b1111101111100 B
b1111101000000 ?
#925
1:
b1 ;
1(
#930
0(
0'
#935
b10 ;
b1 =
b111100 >
1(
#940
0(
#945
b11 ;
b1111 "
b1111 <
1(
#950
0(
#955
b0 ;
0:
1!
1(
#960
0(
#965
0!
1(
#970
0(
#975
1(
#980
0(
#985
1(
#990
0(
#995
1(
#1000
0(
#1005
1(
#1010
0(
#1015
1:
b1 ;
1(
1'
b10100 @
b10 .
b10001100101000 -
b10001110100000 /
b1001 ,
b1001 2
b10001110100000 *
b10001110100000 1
b10001100101000 )
b10001100101000 0
b1001 A
b10001110100000 B
b10001100101000 ?
#1020
0(
#1025
b10 ;
b10 =
b1111000 >
1(
0'
#1030
0(
#1035
b11 ;
b10100 "
b10100 <
1(
#1040
0(
#1045
b0 ;
0:
1!
1(
#1050
0(
#1055
0!
1(
#1060
0(
#1065
1(
#1070
0(
#1075
1(
#1080
0(
#1085
1(
#1090
0(
#1095
1(
#1100
0(
#1105
1:
b1 ;
1(
1'
b11001 @
b11 .
b10011100010000 -
b10011111000100 /
b1010 ,
b1010 2
b10011111000100 *
b10011111000100 1
b10011100010000 )
b10011100010000 0
b1010 A
b10011111000100 B
b10011100010000 ?
#1110
0(
#1115
b10 ;
b11 =
b10110100 >
1(
0'
#1120
0(
#1125
b11 ;
b11001 "
b11001 <
1(
#1130
0(
#1135
b0 ;
0:
1!
1(
#1140
0(
#1145
0!
1(
#1150
0(
#1155
1(
#1160
0(
#1165
1(
#1170
0(
#1175
1(
#1180
0(
#1185
1(
#1190
0(
#1195
1:
b1 ;
1(
1'
b111100 @
b1010 .
b11110100001001000000 -
b11110100010010011000 /
b1011 ,
b1011 2
b11110100010010011000 *
b11110100010010011000 1
b11110100001001000000 )
b11110100001001000000 0
b1011 A
b11110100010010011000 B
b11110100001001000000 ?
#1200
0(
#1205
b10 ;
b1010 =
b1001011000 >
1(
0'
#1210
0(
#1215
b11 ;
b111100 "
b111100 <
1(
#1220
0(
#1225
b0 ;
0:
1!
1(
#1230
0(
#1235
0!
1(
#1240
0(
#1245
1(
#1250
0(
#1255
1(
#1260
0(
#1265
1(
#1270
0(
#1275
1(
#1280
0(
#1285
1(
#1290
0(
#1295
1(
#1300
0(
#1305
1(
#1310
0(
#1315
1(
#1320
0(
#1325
1(
#1330
0(
#1335
1(
#1340
0(
#1345
1(
#1350
0(
#1355
1(
#1360
0(
#1365
1(
#1370
0(
#1375
1(
#1380
0(
#1385
1(
